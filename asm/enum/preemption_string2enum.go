// Code generated by "string2enum -linecomment -type Preemption ../../ir/enum"; DO NOT EDIT.

package enum

import (
	"fmt"

	"github.com/llir/llvm/ir/enum"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the string2enum command to generate them again.
	var x [1]struct{}
	_ = x[enum.PreemptionNone-0]
	_ = x[enum.PreemptionDSOLocal-1]
	_ = x[enum.PreemptionDSOLocalEquivalent-2]
	_ = x[enum.PreemptionDSOPreemptable-3]
}

const _Preemption_name = "nonedso_localdso_local_equivalentdso_preemptable"

var _Preemption_index = [...]uint8{0, 4, 13, 33, 48}

// PreemptionFromString returns the Preemption enum corresponding to s.
func PreemptionFromString(s string) enum.Preemption {
	if len(s) == 0 {
		return 0
	}
	for i := range _Preemption_index[:len(_Preemption_index)-1] {
		if s == _Preemption_name[_Preemption_index[i]:_Preemption_index[i+1]] {
			return enum.Preemption(i)
		}
	}
	panic(fmt.Errorf("unable to locate Preemption enum corresponding to %q", s))
}
